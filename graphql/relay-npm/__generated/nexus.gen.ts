/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as npm from './../data/npm';
import * as skypack from './../data/skypack';
import { Context } from '@trygql/api/context';
import { core, connectionPluginCore } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "EmailAddress";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    object<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "JSONObject";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "URL";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "EmailAddress";
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    object<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "JSONObject";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "URL";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: Date;
  EmailAddress: string;
  JSONObject: object;
  URL: string;
}

export interface NexusGenObjects {
  AssetExport: skypack.AssetExport;
  Distributable: npm.Distributable;
  JSExport: skypack.JSExport;
  Package: npm.Package;
  PackageConnection: {
    // root type
    edges?: Array<NexusGenRootTypes['PackageEdge'] | null> | null; // [PackageEdge]
    nodes?: Array<NexusGenRootTypes['Package'] | null> | null; // [Package]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  PackageEdge: {
    // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Package'] | null; // Package
  };
  PageInfo: {
    // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  };
  Query: {};
  Tag: {
    // root type
    tag: string; // String!
    version: string; // String!
  };
  Version: npm.Version;
}

export interface NexusGenInterfaces {
  Export: skypack.Export;
  Metadata: npm.Metadata;
  Node: NexusGenRootTypes['Package'] | NexusGenRootTypes['Version'];
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars;

export interface NexusGenFieldTypes {
  AssetExport: {
    // field return type
    path: string; // String!
  };
  Distributable: {
    // field return type
    fileCount: number | null; // Int
    integrity: string | null; // String
    npmSignature: string | null; // String
    shasum: string; // String!
    tarball: NexusGenScalars['URL']; // URL!
    unpackagedSize: number | null; // Int
  };
  JSExport: {
    // field return type
    hasDefaultExport: boolean | null; // Boolean
    namedExports: Array<string | null> | null; // [String]
    path: string; // String!
  };
  Package: {
    // field return type
    distTags: NexusGenRootTypes['Tag'][] | null; // [Tag!]
    id: string; // ID!
    modifiedAt: NexusGenScalars['DateTime']; // DateTime!
    name: string; // String!
    version: NexusGenRootTypes['Version'] | null; // Version
    versions: NexusGenRootTypes['Version'][] | null; // [Version!]
  };
  PackageConnection: {
    // field return type
    edges: Array<NexusGenRootTypes['PackageEdge'] | null> | null; // [PackageEdge]
    nodes: Array<NexusGenRootTypes['Package'] | null> | null; // [Package]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  PackageEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Package'] | null; // Package
  };
  PageInfo: {
    // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  };
  Query: {
    // field return type
    node: NexusGenRootTypes['Node'] | null; // Node
    package: NexusGenRootTypes['Package'] | null; // Package
    resolve: NexusGenRootTypes['Version'] | null; // Version
    search: NexusGenRootTypes['PackageConnection'] | null; // PackageConnection
  };
  Tag: {
    // field return type
    tag: string; // String!
    version: string; // String!
  };
  Version: {
    // field return type
    bin: NexusGenScalars['JSONObject'] | null; // JSONObject
    dependencies: NexusGenScalars['JSONObject'] | null; // JSONObject
    devDependencies: NexusGenScalars['JSONObject'] | null; // JSONObject
    dist: NexusGenRootTypes['Distributable']; // Distributable!
    engines: NexusGenScalars['JSONObject'] | null; // JSONObject
    exports: Array<NexusGenRootTypes['Export'] | null> | null; // [Export]
    id: string; // ID!
    name: string; // String!
    optionalDependencies: NexusGenScalars['JSONObject'] | null; // JSONObject
    peerDependencies: NexusGenScalars['JSONObject'] | null; // JSONObject
    version: string; // String!
  };
  Export: {
    // field return type
    path: string; // String!
  };
  Metadata: {
    // field return type
    id: string; // ID!
    name: string; // String!
  };
  Node: {
    // field return type
    id: string; // ID!
  };
}

export interface NexusGenFieldTypeNames {
  AssetExport: {
    // field return type name
    path: 'String';
  };
  Distributable: {
    // field return type name
    fileCount: 'Int';
    integrity: 'String';
    npmSignature: 'String';
    shasum: 'String';
    tarball: 'URL';
    unpackagedSize: 'Int';
  };
  JSExport: {
    // field return type name
    hasDefaultExport: 'Boolean';
    namedExports: 'String';
    path: 'String';
  };
  Package: {
    // field return type name
    distTags: 'Tag';
    id: 'ID';
    modifiedAt: 'DateTime';
    name: 'String';
    version: 'Version';
    versions: 'Version';
  };
  PackageConnection: {
    // field return type name
    edges: 'PackageEdge';
    nodes: 'Package';
    pageInfo: 'PageInfo';
  };
  PackageEdge: {
    // field return type name
    cursor: 'String';
    node: 'Package';
  };
  PageInfo: {
    // field return type name
    endCursor: 'String';
    hasNextPage: 'Boolean';
    hasPreviousPage: 'Boolean';
    startCursor: 'String';
  };
  Query: {
    // field return type name
    node: 'Node';
    package: 'Package';
    resolve: 'Version';
    search: 'PackageConnection';
  };
  Tag: {
    // field return type name
    tag: 'String';
    version: 'String';
  };
  Version: {
    // field return type name
    bin: 'JSONObject';
    dependencies: 'JSONObject';
    devDependencies: 'JSONObject';
    dist: 'Distributable';
    engines: 'JSONObject';
    exports: 'Export';
    id: 'ID';
    name: 'String';
    optionalDependencies: 'JSONObject';
    peerDependencies: 'JSONObject';
    version: 'String';
  };
  Export: {
    // field return type name
    path: 'String';
  };
  Metadata: {
    // field return type name
    id: 'ID';
    name: 'String';
  };
  Node: {
    // field return type name
    id: 'ID';
  };
}

export interface NexusGenArgTypes {
  Package: {
    version: {
      // args
      selector: string; // String!
    };
    versions: {
      // args
      limit?: number | null; // Int
      skip?: number | null; // Int
    };
  };
  Query: {
    node: {
      // args
      id: string; // ID!
    };
    package: {
      // args
      name: string; // String!
    };
    resolve: {
      // args
      name: string; // String!
      selector: string; // String!
    };
    search: {
      // args
      after?: string | null; // String
      first: number; // Int!
      query: string; // String!
    };
  };
  Version: {
    exports: {
      // args
      limit?: number | null; // Int
      skip?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  Export: 'AssetExport' | 'JSExport';
  Metadata: 'Package' | 'Version';
  Node: 'Package' | 'Version';
}

export interface NexusGenTypeInterfaces {
  AssetExport: 'Export';
  JSExport: 'Export';
  Package: 'Metadata' | 'Node';
  Version: 'Metadata' | 'Node';
  Metadata: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType =
  | 'Export'
  | 'Metadata'
  | 'Node';

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
    /**
    The TTL (time to live) for the given field’s cached results.
     */
    ttl?: number;
  }
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
}
