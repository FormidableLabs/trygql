### This file was generated by Nexus Schema
### Do not make changes to this file directly

type Author {
  book: Book!
  id: ID!
  name: String!
  recognized: Boolean!
}

type Book {
  genre: String!
  id: ID!
  published: Boolean!
  rating: Float!
  review: Review
  title: String!
}

type Employee {
  id: ID!
  name: String!
  origin: String!
}

type Mutation {
  addAuthors(newAuthors: NewAuthorsInput!): [Author]!
  addBooks(newBooks: NewBooksInput!): [Book]!
  addEmployees(newEmployees: NewEmployeesInput!): [Employee]!
  addStores(newStores: NewStoresInput!): [Store]!
  addTodo(complete: Boolean!, text: String!): Todo!
  addTodos(newTodos: NewTodosInput!): [Todo]!
  addWriters(newWriters: NewWritersInput!): [Writer]!
  updateTodo(complete: Boolean!, id: ID!): Todo!
}

input NewAuthor {
  book: NewBook!
  id: ID!
  name: String!
  recognized: Boolean!
}

input NewAuthorsInput {
  authors: [NewAuthor]!
}

input NewBook {
  genre: String!
  id: ID!
  published: Boolean!
  rating: Float!
  review: NewReview
  title: String!
}

input NewBooksInput {
  books: [NewBook]!
}

input NewEmployee {
  id: ID!
  name: String!
  origin: String!
}

input NewEmployeesInput {
  employees: [NewEmployee]!
}

input NewPerson {
  id: ID!
  name: String!
  verified: Boolean!
}

input NewReview {
  id: ID!
  name: String!
  reviewer: NewPerson!
  score: Int!
}

input NewStore {
  country: String!
  id: ID!
  name: String!
}

input NewStoresInput {
  stores: [NewStore]!
}

input NewTodo {
  complete: Boolean!
  id: ID!
  text: String!
}

input NewTodosInput {
  todos: [NewTodo]!
}

input NewWriter {
  amountOfBooks: Float!
  id: ID!
  interests: String!
  name: String
  number: Int!
  recognized: Boolean!
}

input NewWritersInput {
  writers: [NewWriter]!
}

type Person {
  id: ID!
  name: String!
  verfied: Boolean!
}

type Query {
  authors: [Author]!
  books: [Book]!
  employees: [Employee]!
  stores: [Store]!
  todos: [Todo]!
  writers: [Writer]!
}

type Review {
  id: ID!
  name: String!
  reviewer: Person!
  score: Int!
}

type Store {
  country: String!
  id: ID!
  name: String!
}

type Todo {
  complete: Boolean!
  id: ID!
  text: String!
}

type Writer {
  amountOfBooks: Float!
  id: ID!
  interests: String!
  name: String
  number: Int!
  recognized: Boolean!
}
