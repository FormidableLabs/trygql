/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as prisma from './../node_modules/@prisma/client/index';
import { Context } from '@trygql/api/context';
import { core, connectionPluginCore } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    uuid<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "UUID";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "DateTime";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void; // "URL";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
     */
    uuid<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "UUID";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "DateTime";
    /**
     * A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
     */
    url<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "URL";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void;
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginInput: {
    // input type
    password: string; // String!
    username: string; // String!
  };
}

export interface NexusGenEnums {
  LinkSorting: 'NEW' | 'TOP';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Cursor: string;
  DateTime: Date;
  URL: string;
  UUID: string;
}

export interface NexusGenObjects {
  Credentials: {
    // root type
    refreshToken: string; // String!
    token: string; // String!
  };
  Link: prisma.Link;
  LinkEdge: prisma.LinkEdge;
  Mutation: {};
  PageInfo: {
    // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  };
  Query: {};
  QueryLinks_Connection: {
    // root type
    edges?: Array<NexusGenRootTypes['QueryLinks_Edge'] | null> | null; // [QueryLinks_Edge]
    nodes?: Array<NexusGenRootTypes['Link'] | null> | null; // [Link]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  QueryLinks_Edge: {
    // root type
    cursor?: NexusGenScalars['Cursor'] | null; // Cursor
    node?: NexusGenRootTypes['Link'] | null; // Link
  };
  User: prisma.User;
  UserLinks_Connection: {
    // root type
    edges?: Array<NexusGenRootTypes['UserLinks_Edge'] | null> | null; // [UserLinks_Edge]
    nodes?: Array<NexusGenRootTypes['Link'] | null> | null; // [Link]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  UserLinks_Edge: {
    // root type
    cursor?: NexusGenScalars['Cursor'] | null; // Cursor
    node?: NexusGenRootTypes['Link'] | null; // Link
  };
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums;

export interface NexusGenFieldTypes {
  Credentials: {
    // field return type
    refreshToken: string; // String!
    token: string; // String!
  };
  Link: {
    // field return type
    canonicalUrl: NexusGenScalars['URL'] | null; // URL
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    id: NexusGenScalars['UUID'] | null; // UUID
    image: NexusGenScalars['URL'] | null; // URL
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  };
  LinkEdge: {
    // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    node: NexusGenRootTypes['Link'] | null; // Link
    user: NexusGenRootTypes['User'] | null; // User
  };
  Mutation: {
    // field return type
    createLink: NexusGenRootTypes['LinkEdge']; // LinkEdge!
    refreshCredentials: NexusGenRootTypes['Credentials']; // Credentials!
    register: NexusGenRootTypes['Credentials']; // Credentials!
    saveLink: NexusGenRootTypes['LinkEdge']; // LinkEdge!
    signin: NexusGenRootTypes['Credentials']; // Credentials!
  };
  PageInfo: {
    // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  };
  Query: {
    // field return type
    links: NexusGenRootTypes['QueryLinks_Connection'] | null; // QueryLinks_Connection
    me: NexusGenRootTypes['User'] | null; // User
  };
  QueryLinks_Connection: {
    // field return type
    edges: Array<NexusGenRootTypes['QueryLinks_Edge'] | null> | null; // [QueryLinks_Edge]
    nodes: Array<NexusGenRootTypes['Link'] | null> | null; // [Link]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  QueryLinks_Edge: {
    // field return type
    cursor: NexusGenScalars['Cursor'] | null; // Cursor
    node: NexusGenRootTypes['Link'] | null; // Link
  };
  User: {
    // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: NexusGenScalars['UUID']; // UUID!
    links: NexusGenRootTypes['UserLinks_Connection'] | null; // UserLinks_Connection
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    username: string; // String!
  };
  UserLinks_Connection: {
    // field return type
    edges: Array<NexusGenRootTypes['UserLinks_Edge'] | null> | null; // [UserLinks_Edge]
    nodes: Array<NexusGenRootTypes['Link'] | null> | null; // [Link]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  UserLinks_Edge: {
    // field return type
    cursor: NexusGenScalars['Cursor'] | null; // Cursor
    node: NexusGenRootTypes['Link'] | null; // Link
  };
}

export interface NexusGenFieldTypeNames {
  Credentials: {
    // field return type name
    refreshToken: 'String';
    token: 'String';
  };
  Link: {
    // field return type name
    canonicalUrl: 'URL';
    createdAt: 'DateTime';
    description: 'String';
    id: 'UUID';
    image: 'URL';
    title: 'String';
    updatedAt: 'DateTime';
  };
  LinkEdge: {
    // field return type name
    createdAt: 'DateTime';
    node: 'Link';
    user: 'User';
  };
  Mutation: {
    // field return type name
    createLink: 'LinkEdge';
    refreshCredentials: 'Credentials';
    register: 'Credentials';
    saveLink: 'LinkEdge';
    signin: 'Credentials';
  };
  PageInfo: {
    // field return type name
    endCursor: 'String';
    hasNextPage: 'Boolean';
    hasPreviousPage: 'Boolean';
    startCursor: 'String';
  };
  Query: {
    // field return type name
    links: 'QueryLinks_Connection';
    me: 'User';
  };
  QueryLinks_Connection: {
    // field return type name
    edges: 'QueryLinks_Edge';
    nodes: 'Link';
    pageInfo: 'PageInfo';
  };
  QueryLinks_Edge: {
    // field return type name
    cursor: 'Cursor';
    node: 'Link';
  };
  User: {
    // field return type name
    createdAt: 'DateTime';
    id: 'UUID';
    links: 'UserLinks_Connection';
    updatedAt: 'DateTime';
    username: 'String';
  };
  UserLinks_Connection: {
    // field return type name
    edges: 'UserLinks_Edge';
    nodes: 'Link';
    pageInfo: 'PageInfo';
  };
  UserLinks_Edge: {
    // field return type name
    cursor: 'Cursor';
    node: 'Link';
  };
}

export interface NexusGenArgTypes {
  Mutation: {
    createLink: {
      // args
      url: NexusGenScalars['URL']; // URL!
    };
    refreshCredentials: {
      // args
      refreshToken: string; // String!
    };
    register: {
      // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    };
    saveLink: {
      // args
      linkId: NexusGenScalars['UUID']; // UUID!
    };
    signin: {
      // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    };
  };
  Query: {
    links: {
      // args
      after?: string | null; // String
      first: number; // Int!
      sortBy?: NexusGenEnums['LinkSorting'] | null; // LinkSorting
    };
  };
  User: {
    links: {
      // args
      after?: string | null; // String
      first: number; // Int!
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
}
