/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { RawType, RawPokemon } from './schema';

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {
  PokemonType: RawType;
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenObjects {
  Attack: {
    // root type
    damage?: number | null; // Int
    name?: string | null; // String
    type?: NexusGenEnums['PokemonType'] | null; // PokemonType
  };
  AttacksConnection: {
    // root type
    fast?: Array<NexusGenRootTypes['Attack'] | null> | null; // [Attack]
    special?: Array<NexusGenRootTypes['Attack'] | null> | null; // [Attack]
  };
  EvolutionRequirement: {
    // root type
    amount?: number | null; // Int
    name?: string | null; // String
  };
  Pokemon: RawPokemon;
  PokemonDimension: {
    // root type
    maximum?: string | null; // String
    minimum?: string | null; // String
  };
  Query: {};
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums;

export interface NexusGenFieldTypes {
  Attack: {
    // field return type
    damage: number | null; // Int
    name: string | null; // String
    type: NexusGenEnums['PokemonType'] | null; // PokemonType
  };
  AttacksConnection: {
    // field return type
    fast: Array<NexusGenRootTypes['Attack'] | null> | null; // [Attack]
    special: Array<NexusGenRootTypes['Attack'] | null> | null; // [Attack]
  };
  EvolutionRequirement: {
    // field return type
    amount: number | null; // Int
    name: string | null; // String
  };
  Pokemon: {
    // field return type
    attacks: NexusGenRootTypes['AttacksConnection'] | null; // AttacksConnection
    classification: string | null; // String
    evolutionRequirements: Array<
      NexusGenRootTypes['EvolutionRequirement'] | null
    > | null; // [EvolutionRequirement]
    evolutions: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
    fleeRate: number | null; // Float
    height: NexusGenRootTypes['PokemonDimension'] | null; // PokemonDimension
    id: string; // ID!
    maxCP: number | null; // Int
    maxHP: number | null; // Int
    name: string; // String!
    resistant: Array<NexusGenEnums['PokemonType'] | null> | null; // [PokemonType]
    types: Array<NexusGenEnums['PokemonType'] | null> | null; // [PokemonType]
    weaknesses: Array<NexusGenEnums['PokemonType'] | null> | null; // [PokemonType]
    weight: NexusGenRootTypes['PokemonDimension'] | null; // PokemonDimension
  };
  PokemonDimension: {
    // field return type
    maximum: string | null; // String
    minimum: string | null; // String
  };
  Query: {
    // field return type
    pokemon: NexusGenRootTypes['Pokemon'] | null; // Pokemon
    pokemons: Array<NexusGenRootTypes['Pokemon'] | null> | null; // [Pokemon]
  };
}

export interface NexusGenFieldTypeNames {
  Attack: {
    // field return type name
    damage: 'Int';
    name: 'String';
    type: 'PokemonType';
  };
  AttacksConnection: {
    // field return type name
    fast: 'Attack';
    special: 'Attack';
  };
  EvolutionRequirement: {
    // field return type name
    amount: 'Int';
    name: 'String';
  };
  Pokemon: {
    // field return type name
    attacks: 'AttacksConnection';
    classification: 'String';
    evolutionRequirements: 'EvolutionRequirement';
    evolutions: 'Pokemon';
    fleeRate: 'Float';
    height: 'PokemonDimension';
    id: 'ID';
    maxCP: 'Int';
    maxHP: 'Int';
    name: 'String';
    resistant: 'PokemonType';
    types: 'PokemonType';
    weaknesses: 'PokemonType';
    weight: 'PokemonDimension';
  };
  PokemonDimension: {
    // field return type name
    maximum: 'String';
    minimum: 'String';
  };
  Query: {
    // field return type name
    pokemon: 'Pokemon';
    pokemons: 'Pokemon';
  };
}

export interface NexusGenArgTypes {
  Query: {
    pokemon: {
      // args
      id: string; // ID!
    };
    pokemons: {
      // args
      limit?: number | null; // Int
      skip?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean;
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[];
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean;
  }
}
